/* 
 * Hero Section - Spacing System
 * A dedicated CSS module for hero section styling using CSS custom properties
 * for maintainable and scalable spacing management.
 */

/* Base spacing variables - single source of truth */
:root {
  /* Core spacing units */
  --spacing-unit: 8px;                  /* Base unit for all spacing calculations */
  --spacing-xs: var(--spacing-unit);    /* 8px - Extra small spacing */
  --spacing-sm: calc(var(--spacing-unit) * 2);  /* 16px - Small spacing */
  --spacing-md: calc(var(--spacing-unit) * 3);  /* 24px - Medium spacing */
  --spacing-lg: calc(var(--spacing-unit) * 4);  /* 32px - Large spacing */
  --spacing-xl: calc(var(--spacing-unit) * 6);  /* 48px - Extra large spacing */

  /* Hero section specific variables */
  --hero-bg-color: #F9F6EC;
  --safe-area-inset-bottom: env(safe-area-inset-bottom, 0px);
  --hero-desktop-height: 650px;  
  --hero-mobile-height: 450px; /* Standardized mobile height to 450px to match index.tsx */
  --hero-z-index: 70;
  --hero-content-max-width: 1200px;
  --hero-title-max-width: 920px;
  --hero-description-max-width: 650px;
  --hero-spacing-base: var(--spacing-sm);    /* 16px - Base unit for hero spacing */
  
  /* Content spacing - desktop defaults */
  --hero-content-padding-top: 0px;            /* Set to 0 for better vertical centering */
  --hero-title-margin-bottom: var(--spacing-xs);    /* Reduced from 16px to 8px */
  --hero-description-margin-y: var(--spacing-xs);   /* Reduced from 16px to 8px top/bottom */
  --hero-cta-margin-top: var(--spacing-sm);         /* Reduced from 24px to 16px */
  --hero-cta-margin-bottom: var(--spacing-md);      /* Reduced from 32px to 24px */
}

/* Main hero section container */
.hero-section {
  /* Position and dimensions */
  position: relative;
  width: 100%;
  height: var(--hero-desktop-height);
  min-height: var(--hero-desktop-height);
  max-height: var(--hero-desktop-height);
  
  /* Visual styling */
  background-color: var(--hero-bg-color);
  overflow: visible;
  z-index: var(--hero-z-index);
  
  /* Layout */
  display: flex;
  flex-direction: column;
  justify-content: center; /* Center content vertically */
  align-items: center;     /* Center content horizontally */
  
  /* Remove padding to let internal elements control spacing */
  padding: 0;
  margin: 0;
  text-align: center; /* Ensure proper text alignment */
}

/* Mobile-specific adjustments */
@media (max-width: 768px) {
  /* 
   * Root variable overrides for mobile
   * These extend the main spacing system but with mobile-specific values
   */
  :root {
    /* Mobile uses tighter spacing values */
    --hero-content-padding-top: var(--spacing-sm); /* 16px for mobile */
    --hero-title-margin-bottom: var(--spacing-xs); /* 8px */
    --hero-description-margin-y: var(--spacing-xs); /* 8px */
    --hero-cta-margin-top: var(--spacing-sm); /* 16px */
    --hero-cta-margin-bottom: var(--spacing-sm); /* 16px */
  }
  
  .hero-section {
    height: var(--hero-mobile-height);
    min-height: var(--hero-mobile-height);
    max-height: var(--hero-mobile-height);
    padding: 0;
    margin: 0;
    text-align: center;
  }
}

/**
 * Desktop Hero Section Styles (min-width: 769px)
 * 
 * CRITICAL FIX: Addresses issues where elements disappear, shift, or overlap after refresh
 * 
 * The problem: Multiple elements receiving inline styles with fixed 500px heights
 * The solution: Multiple layers of protection against any height/dimension manipulation
 */
@media (min-width: 769px) {
  /**
   * 1. ROOT CONTAINER - FIXED HEIGHT
   * 
   * Set a consistent 650px height ONLY on the root container
   * All child elements will size naturally within this container
   */
  section#hero,
  section[data-hero-section="true"],
  div[data-hero-section="true"],
  [data-hero-section="true"] {
    /* Fixed-height container using the CSS variable */
    height: var(--hero-desktop-height, 650px) !important;
    min-height: var(--hero-desktop-height, 650px) !important;
    max-height: var(--hero-desktop-height, 650px) !important;
    
    /* Proper flex layout for consistent distribution */
    display: flex !important;
    flex-direction: column !important;
    justify-content: center !important; /* Vertical centering */
    align-items: center !important;      /* Horizontal centering */
    
    /* Prevent any other properties from affecting layout */
    position: relative !important;
    overflow: visible !important;
    transform: none !important;          /* No transforms that could shift content */
    transition: none !important;         /* No transitions on layout properties */
    
    /* Block any 500px heights that might be applied via CSS variables */
    --block-500px-height: none;
  }
  
  /**
   * 2. FLEXIBLE WRAPPER - CONTENT-DRIVEN SIZING
   * 
   * The hero-wrapper manages spacing between elements
   * It must have content-driven height, NOT fixed height
   */
  .hero-wrapper,
  div.hero-wrapper,
  section#hero > .hero-wrapper,
  [data-hero-section="true"] > .hero-wrapper {
    /* Auto-height based on content */
    height: auto !important;
    min-height: 0 !important;
    max-height: none !important;
    
    /* Flex layout for child distribution */
    display: flex !important;
    flex-direction: column !important;
    justify-content: center !important;
    align-items: center !important;
    
    /* Consistent 24px gap between major sections */
    gap: 24px !important;
    
    /* Width constraints with responsive padding */
    width: 100% !important;
    max-width: var(--hero-content-max-width, 1200px) !important;
    padding: 0 var(--hero-spacing-base, 16px) !important;

    /* No fixed top/bottom margins or padding - rely on flex gap */
    margin: 0 auto !important;
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }
  
  /**
   * 3. PREVENT FIXED HEIGHTS ON ALL CONTENT CONTAINERS
   * 
   * These selectors target inner containers that often get fixed 500px heights
   * Content-driven sizing ensures proper spacing and prevents overlaps
   */
  /* Generic content containers */
  .hero-content,
  .hero-content-container,
  div.hero-content,
  .hero-wrapper > div,
  .hero-wrapper > .hero-content {
    /* Auto-height to prevent 500px override */
    height: auto !important;
    min-height: 0 !important;
    max-height: none !important;
    
    /* Flex layout for proper distribution */
    display: flex !important;
    flex-direction: column !important;
    align-items: center !important;
    
    /* Gap-based spacing instead of margins */
    gap: 16px !important;
    
    /* Allow proper width but prevent overflow */
    width: 100% !important;
    
    /* No fixed spacing - controlled by parent flex container */
    margin: 0 !important;
    padding: 0 !important;
  }
  
  /* Title container */
  .hero-title-container,
  div.hero-title-container,
  .hero-wrapper .hero-title-container,
  #hero .hero-title-container,
  [data-hero-section="true"] .hero-title-container {
    height: auto !important;
    min-height: 0 !important;
    max-height: none !important;
    margin: 0 !important;
    padding: 0 !important;
    width: 100% !important;
    position: relative !important;
    /* Ensure the container is centered and doesn't create extra space */
    display: flex !important;
    flex-direction: column !important;
    justify-content: center !important;
    align-items: center !important;
  }
  
  /* Title element */
  h1#hero-title,
  #hero-title,
  .hero-title-container h1#hero-title {
    height: auto !important; 
    min-height: 0 !important;
    max-height: none !important;
    margin: 0 0 8px 0 !important;
    padding: 0 !important;
    width: 100% !important;
    
    /* Font sizing */
    font-size: 2.5rem !important;
    line-height: 1.2 !important;
  }

  /**
   * 4. SPECIAL HANDLING FOR ROTATING TEXT
   * 
   * The rotating text container needs a fixed height
   * to prevent layout shifts during text rotation
   */
  #hero-title > div,
  .desktop-text-container {
    /* Fixed 64px height ONLY for this specific element */
    height: 64px !important;
    min-height: 64px !important;
    max-height: 64px !important;
    
    /* Proper positioning to prevent layout issues */
    position: relative !important;
    overflow: visible !important;
    
    /* Center content */
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    
    /* Prevent transforms from affecting layout */
    transform: none !important;
    will-change: opacity !important;
  }
  
  /**
   * 5. DESCRIPTION CONTAINER AUTO-HEIGHT
   * 
   * The description container needs extra protection
   * as it's a common source of layout issues
   */
  .hero-description-container,
  div.hero-description-container,
  .auto-height-container {
    /* Auto height based solely on content */
    height: auto !important;
    min-height: 0 !important;
    max-height: none !important;
    
    /* Width constraints for desktop */
    width: 100% !important;
    max-width: 650px !important;
    
    /* Minimal consistent spacing */
    margin: 0 auto 16px auto !important;
    padding: 0 !important;
    
    /* Prevent stacking context issues */
    position: static !important;
    z-index: auto !important;
  }
  
  /**
   * 6. CTA CONTAINER AUTO-HEIGHT
   * 
   * The CTA container should be sized based on its content
   * with consistent horizontal alignment
   */
  .hero-cta-container,
  div.hero-cta-container {
    height: auto !important;
    min-height: 0 !important;
    max-height: none !important;
    margin: 0 !important;
    padding: 0 !important;
    width: 100% !important;
    
    /* Flex alignment for buttons */
    display: flex !important;
    flex-direction: row !important;
    justify-content: center !important;
    align-items: center !important;
  }
  
  /**
   * 7. ANIMATION CLASSES - VISUAL ONLY
   * 
   * Animation classes should ONLY affect visual properties
   * not layout dimensions or positioning
   */
  .hero-fade-in,
  .hero-delay-100,
  .hero-delay-200,
  .hero-content.hero-fade-in,
  .hero-cta-container.hero-fade-in,
  div.hero-content.hero-fade-in,
  div.hero-cta-container.hero-fade-in,
  .hero-description-container.hero-fade-in {
    /* Reset any height properties that animations might set */
    height: auto !important;
    min-height: 0 !important;
    max-height: none !important;
    
    /* Prevent animations from changing position or display */
    position: static !important;
    display: flex !important;
    
    /* Limit transitions to only opacity and transform */
    transition-property: opacity, transform !important;
    will-change: opacity, transform !important;
    
    /* Prevent any transforms from affecting layout */
    transform-origin: center !important;
  }
}

/* Wrapper around all content to maintain proper vertical distribution */
.hero-wrapper {
  display: flex;
  flex-direction: column;
  flex: 1;
  width: 100%;
  height: 100%; /* Ensure it takes full height of parent */
  max-width: var(--hero-content-max-width);
  justify-content: center; /* Changed from flex-start to center */
  align-items: center;
  padding: 0 var(--hero-spacing-base);
  margin: 0 auto; /* Center horizontally */
  padding-top: 0; /* Remove top padding */
  padding-bottom: 0; /* Remove bottom padding */
}

/* Content container styles */
.hero-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center; /* Add vertical centering */
  width: 100%;
  padding-top: 0; /* Remove top padding */
  padding-bottom: 0; /* Remove bottom padding */
  margin: 0; /* Remove all margins */
  text-align: center;
  /* Fix for extra gap above "PROPERTY CONTENT THAT" */
  min-height: 0 !important;
  height: auto !important;
  max-height: none !important;
}

/* Ensure child elements use proper spacing */
.hero-title-container {
  max-width: var(--hero-title-max-width);
  margin: 0 auto var(--hero-spacing-base);
}

.hero-description-container {
  max-width: var(--hero-description-max-width);
  margin: var(--hero-spacing-base) auto var(--hero-spacing-base); /* Reduced bottom margin */
}

/* Specific CTA container styles with spacing */
.hero-cta-container {
  width: 100%;
  margin-top: calc(var(--hero-spacing-base) * 1.5); /* Reduced from auto to specific value */
  margin-bottom: calc(var(--hero-spacing-base) * 2);
  padding: 0 var(--hero-spacing-base);
}

@media (max-width: 768px) {
  /* Mobile adjustments */
  .hero-content {
    padding-top: var(--hero-content-padding-top, 0); /* Use CSS variable for consistent control */
  }
  
  .hero-description-container {
    max-width: 95%;
    margin: calc(var(--hero-spacing-base) / 2) auto var(--hero-spacing-base);
  }
  
  .hero-cta-container {
    margin-bottom: var(--hero-spacing-base);
  }
}

/* Sustainable fix for hero section top spacing */

/* Use high-specificity selectors to override styles without !important */
section[id="hero"],
section[data-hero-section="true"],
div[data-hero-section="true"],
[data-hero-section="true"] {
  /* Clear any padding that might be set inline */
  padding-top: 0 !important;
  padding-bottom: 0 !important;
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  /* Ensure proper vertical alignment */
  display: flex !important;
  flex-direction: column !important;
  justify-content: center !important;
  align-items: center !important;
  /* Ensure proper sizing */
  height: var(--hero-desktop-height, 650px) !important;
  min-height: var(--hero-desktop-height, 650px) !important;
  max-height: var(--hero-desktop-height, 650px) !important;
}

/* Target the hero-wrapper with specific selectors */
section[id="hero"] .hero-wrapper,
section[data-hero-section="true"] .hero-wrapper,
div[data-hero-section="true"] .hero-wrapper {
  justify-content: center;
  align-items: center;
}

/* Target hero-content with specific selectors */
.hero-section .hero-content,
section[id="hero"] .hero-content,
section[data-hero-section="true"] .hero-content {
  padding-top: var(--hero-content-padding-top);
}

/* Desktop media query for granular control */
@media (min-width: 769px) {
  /* Adjust desktop-specific spacing */
  :root {
    --hero-content-padding-top: 0px;
  }
  
  section[id="hero"] .hero-content,
  section[data-hero-section="true"] .hero-content {
    padding-top: 0;
  }
}

/* Mobile media query for consistent behavior */
@media (max-width: 768px) {
  /* Adjust mobile-specific spacing */
  :root {
    --hero-content-padding-top: 0px;
  }
  
  .hero-section .hero-content {
    padding-top: 0;
  }
}

/* Animation classes for hero elements - CRITICAL: These should ONLY affect opacity/visual properties, not layout */
.hero-fade-in {
  animation: fadeIn 0.4s ease-out forwards;
  will-change: opacity, transform;
  /* IMPORTANT: Ensure animations don't affect layout properties */
  height: auto !important; 
  min-height: 0 !important;
  max-height: none !important;
  position: static !important; /* Prevent position changes during animation */
}

.hero-delay-100 {
  animation-delay: 100ms;
}

.hero-delay-200 {
  animation-delay: 200ms;
}

/* Define animations - ONLY affects opacity and small Y transform, not layout dimensions */
@keyframes fadeIn {
  0% { 
    opacity: 0; 
    transform: translateY(8px); 
    /* CRITICAL: No height, width, or position changes in keyframes */
  }
  100% { 
    opacity: 1; 
    transform: translateY(0); 
    /* CRITICAL: No height, width, or position changes in keyframes */
  }
}

/* Mobile-only scroll indicator animation */
@media (max-width: 768px) {
  /* Subtle bounce animation for scroll indicator */
  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(5px);
    }
    60% {
      transform: translateY(3px);
    }
  }
  
  /* Apply animation to scroll indicator */
  .flex.flex-col.items-center.opacity-60.mt-2 svg {
    animation: bounce 2s infinite ease-in-out;
  }
}

/* Target with high specificity instead of !important */
section[data-hero-section="true"] .hero-description-container,
div[data-hero-section="true"] .hero-description-container,
#hero .hero-description-container,
.hero-section .hero-description-container {
  min-height: auto;
  height: auto;
  max-height: none;
}

/* Target with animation classes - even higher specificity */
section[data-hero-section="true"] .hero-description-container.hero-fade-in,
div[data-hero-section="true"] .hero-description-container.hero-fade-in,
#hero .hero-description-container.hero-fade-in,
.hero-section .hero-description-container.hero-fade-in {
  min-height: auto;
  height: auto;
}

/* Add a custom class that we can target without needing !important */
.auto-height-container {
  min-height: auto;
  height: auto;
  max-height: none;
}

/* Add this to ensure the new class overrides any inline styles */
.content-driven-height,
.hero-description-container.content-driven-height {
  min-height: auto !important;
  height: auto !important;
  max-height: none !important;
  margin: 0 auto !important;
  padding: 0 !important;
  width: 100% !important;
  position: static !important;
  z-index: auto !important;
}